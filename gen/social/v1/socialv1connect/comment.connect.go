// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: social/v1/comment.proto

package socialv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/Rick-Phoenix/gofirst/gen/social/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CommentServiceName is the fully-qualified name of the CommentService service.
	CommentServiceName = "social.v1.CommentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CommentServiceGetCommentProcedure is the fully-qualified name of the CommentService's GetComment
	// RPC.
	CommentServiceGetCommentProcedure = "/social.v1.CommentService/GetComment"
)

// CommentServiceClient is a client for the social.v1.CommentService service.
type CommentServiceClient interface {
	GetComment(context.Context, *connect.Request[v1.GetCommentRequest]) (*connect.Response[v1.GetCommentResponse], error)
}

// NewCommentServiceClient constructs a client for the social.v1.CommentService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCommentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CommentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	commentServiceMethods := v1.File_social_v1_comment_proto.Services().ByName("CommentService").Methods()
	return &commentServiceClient{
		getComment: connect.NewClient[v1.GetCommentRequest, v1.GetCommentResponse](
			httpClient,
			baseURL+CommentServiceGetCommentProcedure,
			connect.WithSchema(commentServiceMethods.ByName("GetComment")),
			connect.WithClientOptions(opts...),
		),
	}
}

// commentServiceClient implements CommentServiceClient.
type commentServiceClient struct {
	getComment *connect.Client[v1.GetCommentRequest, v1.GetCommentResponse]
}

// GetComment calls social.v1.CommentService.GetComment.
func (c *commentServiceClient) GetComment(ctx context.Context, req *connect.Request[v1.GetCommentRequest]) (*connect.Response[v1.GetCommentResponse], error) {
	return c.getComment.CallUnary(ctx, req)
}

// CommentServiceHandler is an implementation of the social.v1.CommentService service.
type CommentServiceHandler interface {
	GetComment(context.Context, *connect.Request[v1.GetCommentRequest]) (*connect.Response[v1.GetCommentResponse], error)
}

// NewCommentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCommentServiceHandler(svc CommentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	commentServiceMethods := v1.File_social_v1_comment_proto.Services().ByName("CommentService").Methods()
	commentServiceGetCommentHandler := connect.NewUnaryHandler(
		CommentServiceGetCommentProcedure,
		svc.GetComment,
		connect.WithSchema(commentServiceMethods.ByName("GetComment")),
		connect.WithHandlerOptions(opts...),
	)
	return "/social.v1.CommentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CommentServiceGetCommentProcedure:
			commentServiceGetCommentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCommentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCommentServiceHandler struct{}

func (UnimplementedCommentServiceHandler) GetComment(context.Context, *connect.Request[v1.GetCommentRequest]) (*connect.Response[v1.GetCommentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("social.v1.CommentService.GetComment is not implemented"))
}
