package {{ .Package }}

import (
  {{ range $import, $_ := .Imports -}}
  "{{ $import }}"
  {{ end -}}
)

{{ $repeated := .RepeatedConverters -}}
{{ range .Converters -}}

{{- $resname := .Resource -}}
{{- $tfields := .TimestampFields -}}
func {{ .Resource }}To{{ .Resource }}Msg({{ .Resource }} *{{ .SrcType }}) *{{ .DstType }} {
	if {{ .Resource }} == nil {
		return nil
	}
  {{ range $name, $_ := .TimestampFields -}}
  {{ $name }} := timestamppb.New({{ $resname }}.{{ $name }})
  {{ end -}}
	return &{{ .DstType }}{
    {{ range .Fields -}}
    {{ if setContains $tfields .Name -}}
    {{ .Name }}: {{ .Name }},
    {{ else if .IsInternal -}}
    {{ .Name }}: {{ .Name }}To{{ .Name }}Msg({{ $resname }}.{{ .Name }}),
    {{ else -}}
    {{ .Name }}: {{ $resname }}.{{ .Name }},
    {{ end -}}
    {{- end }}
	}
}

{{ if setContains $repeated .Resource -}}
func {{ .Resource }}sTo{{ .Resource }}sMsg({{ .Resource }} []*{{ .SrcType }}) []*{{ .DstType }} {
	out := make([]*{{ .DstType }}, len({{ .Resource }}))

	for _, v := range {{ .Resource }} {
		out = append(out, {{ .Resource }}To{{ .Resource }}Msg(v))
	}

	return out
}
{{ end -}}

{{ end -}}

