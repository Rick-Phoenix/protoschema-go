{{ define "txQuery" }}

package db
{{ $subQueriesLen := len .Subqueries }}
{{ $makeParamStruct := .MakeParamStruct }}

{{ if .MakeParamStruct }}
type {{ .Name }}Params struct {
  {{ range $name, $type := .FunctionParams }}
  {{ $name }} {{ $type }}
  {{ end }}
}
{{ end }}

func (s *Store) {{ .Name }}(ctx context.Context, {{ .FuncParamName }} {{ .FuncParamType }}) (*{{ .OutType }}, error) {
  tx, err := s.db.(*sql.DB).BeginTx(ctx, nil)
	if err != nil {
		return nil, fmt.Errorf("failed to begin transaction: %w", err)
	}
	defer tx.Rollback()

	qtx := s.Queries.WithTx(tx)
  {{ range .Subqueries }}
  {{ if not .NoReturn }}{{ .VarName }},{{end}} err := qtx.{{ .Method }}(ctx, {{ if $makeParamStruct }}params.{{ end }}{{ .ParamName }})
  if err != nil {
    return {{ if not .NoReturn }}nil, {{end}}err
  }
  {{ end }}

	if err := tx.Commit(); err != nil {
		return nil, fmt.Errorf("failed to commit transaction: %w", err)
	}

  return {{ if .OutType }}&{{ .OutType }}{
    {{ range .OutTypeFields }}
    {{ . }}: {{ lower . }}, 
    {{ end }}
	},{{ end }} nil
}

{{ end }}
