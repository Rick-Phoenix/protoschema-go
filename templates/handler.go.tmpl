package handlers

{{ template "imports" .Imports }}


type {{ .Resource }}Service struct {
	Store *db.Store
}

func New{{ .Resource }}Service(s *db.Store) *{{ .Resource }}Service {
	return &{{ .Resource }}Service{Store: s}
}

{{ $res := .Resource }}

{{ range .Handlers }}

func (s *{{ $res }}Service) {{ .Name }}(
	ctx context.Context,
  req *connect.Request[{{ .Request.GoPackageName }}.{{ .Request.Name }}],
) (*connect.Response[{{ .Response.GoPackageName }}.{{ .Response.Name }}], error) {

  resource, err := s.Store.method(ctx, params)
  if errors.Is(err, sql.ErrNoRows) {
    return nil, connect.NewError(connect.CodeNotFound, err)
  } else {
    var sqliteErr *sqlite.Error
    if errors.As(err, &sqliteErr) {
      switch sqliteErr.Code() {
      case sqlite3.SQLITE_CONSTRAINT:
        //
      }
    }
  }

  return connect.NewResponse(&{{ .Response.GoPackageName }}.{{ .Response.Name }}{

	}), nil
}

{{ end }}
