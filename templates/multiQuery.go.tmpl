{{ define "multiQuery" }}

package db
{{ $makeParamStruct := .MakeParamStruct }}
{{ $hasTx := .HasTx }}

{{ if .MakeParamStruct }}
type {{ .Name }}Params struct {
  {{ range $name, $type := .FunctionParams }}
  {{ $name }} {{ $type }}
  {{ end }}
}
{{ end }}

func (s *Store) {{ .Name }}(ctx context.Context, {{ .FuncParamName }} {{ .FuncParamType }}) (*{{ .OutType }}, error) {
  {{ if .HasTx }}
  tx, err := s.db.(*sql.DB).BeginTx(ctx, nil)
	if err != nil {
		return nil, fmt.Errorf("failed to begin transaction: %w", err)
	}
	defer tx.Rollback()

	qtx := s.Queries.WithTx(tx)
  {{ end }}

  {{ range .Queries }}

{{ if .IsTx }}

  {{ if  $hasTx }}
  {{ template "txQuery" . }}
  {{ else }}
  {{ template "singleSubquery" . }}
  {{ end }}

{{ else }}

  {{ $subQueriesLen := len .Subqueries }}

  {{ if gt $subQueriesLen 1 }}
  {{ template "goroutineSubquery" . }}
  {{ else }}{{/* If subQueriesLen = 1 */}}
  {{ template "singleSubquery" . }}
  {{ end }}{{/* If subQueriesLen > 1 */}}

{{ end }}

{{ end }}

	return &{{ .OutType }}{
    {{ range .OutTypeFields }}
    {{ . }}: {{ lower . }}, 
    {{ end }}
	}, nil
}

{{ end }}

